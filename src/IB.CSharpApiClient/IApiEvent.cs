using System;
using IB.CSharpApiClient.Events;
using IBApi;

namespace IB.CSharpApiClient
{
    public interface IApiEvent
    {
        event EventHandler<AccountDownloadEndEventArgs> AccountDownloadEnd;
        event EventHandler<AccountSummaryEventArgs> AccountSummary;
        event EventHandler<AccountSummaryEndEventArgs> AccountSummaryEnd;
        event EventHandler<AccountUpdateMultiEventArgs> AccountUpdateMulti;
        event EventHandler<AccountUpdateMultiEndEventArgs> AccountUpdateMultiEnd;
        event EventHandler<AccountValueEventArgs> AccountValue;
        event EventHandler<AdvisorDataEventArgs> AdvisorData;
        event EventHandler<BondContractDetailsEventArgs> BondContractDetails;
        event EventHandler<CommissionReportEventArgs> CommissionReport;
        event EventHandler ConnectionClosed;
        event EventHandler<ConnectionStatusEventArgs> ConnectionStatus;
        event EventHandler<ContractDetailsEventArgs> ContractDetails;
        event EventHandler<ContractDetailsEndEventArgs> ContractDetailsEnd;
        event EventHandler<DailyPnLEventArgs> DailyPnL;
        event EventHandler<DailyPnLSingleEventArgs> DailyPnLSingle;
        event EventHandler<DeepBookEventArgs> DeepBook;
        event EventHandler<DeltaNeutralValidationEventArgs> DeltaNeutralValidation;
        event EventHandler<ErrorEventArgs> Error;
        event EventHandler<ExecutionEventArgs> Execution;
        event EventHandler<ExecutionEndEventArgs> ExecutionEnd;
        event EventHandler<FamilyCodesEventArgs> FamilyCodes;
        event EventHandler<FundamentalsEventArgs> Fundamentals;
        event EventHandler<HeadTimestampEventArgs> HeadTimestamp;
        event EventHandler<HistogramDataEventArgs> HistogramData;
        event EventHandler<HistoricalDataEventArgs> HistoricalData;
        event EventHandler<HistoricalDataEndEventArgs> HistoricalDataEnd;
        event EventHandler<HistoricalDataEventArgs> HistoricalDataUpdate;
        event EventHandler<HistoricalNewsEventArgs> HistoricalNews;
        event EventHandler<HistoricalNewsEndEventArgs> HistoricalNewsEnd;
        event EventHandler<HistoricalTickEventArgs> HistoricalTick;
        event EventHandler<HistoricalTickBidAskEventArgs> HistoricalTickBidAsk;
        event EventHandler<HistoricalTickBidAskEndEventArgs> HistoricalTickBidAskEnd;
        event EventHandler<HistoricalTickEndEventArgs> HistoricalTickEnd;
        event EventHandler<HistoricalTickLastEventArgs> HistoricalTickLast;
        event EventHandler<HistoricalTickLastEndEventArgs> HistoricalTickLastEnd;
        event EventHandler<ManagedAccountsEventArgs> ManagedAccounts;
        event EventHandler<MarketDataTypeEventArgs> MarketDataType;
        event EventHandler<MarketRuleEventArgs> MarketRule;
        event EventHandler<MktDepthExchangesEventArgs> MktDepthExchanges;
        event EventHandler<NewsArticleEventArgs> NewsArticle;
        event EventHandler<NewsProvidersEventArgs> NewsProviders;
        event EventHandler<OpenOrderEventArgs> OpenOrder;
        event EventHandler OpenOrderEnd;
        event EventHandler<OrderStatusEventArgs> OrderStatus;
        event EventHandler<PositionEventArgs> Position;
        event EventHandler PositionEnd;
        event EventHandler<PositionMultiEventArgs> PositionMulti;
        event EventHandler<PositionMultiEndEventArgs> PositionMultiEnd;
        event EventHandler<RealTimeBarEventArgs> RealTimeBar;
        event EventHandler<ScannerEventArgs> Scanner;
        event EventHandler<ScannerEndEventArgs> ScannerEnd;
        event EventHandler<ScannerParametersEventArgs> ScannerParameters;
        event EventHandler<SecurityDefinitionOptionParameterEventArgs> SecurityDefinitionOptionParameter;
        event EventHandler<SecurityDefinitionOptionParameterEndEventArgs> SecurityDefinitionOptionParameterEnd;
        event EventHandler<SoftDollarTiersEventArgs> SoftDollarTiers;
        event EventHandler<SymbolSamplesEventArgs> SymbolSamples;
        event EventHandler<TickByTickAllLastEventArgs> TickByTickAllLast;
        event EventHandler<TickByTickBidAskEventArgs> TickByTickBidAsk;
        event EventHandler<TickByTickMidPointEventArgs> TickByTickMidPoint;
        event EventHandler<TickEfpEventArgs> TickEfp;
        event EventHandler<TickGenericEventArgs> TickGeneric;
        event EventHandler<TickNewsEventArgs> TickNews;
        event EventHandler<TickOptionEventArgs> TickOption;
        event EventHandler<TickPriceEventArgs> TickPrice;
        event EventHandler<TickReqParamsEventArgs> TickReqParams;
        event EventHandler<TickSizeEventArgs> TickSize;
        event EventHandler<TickSnapshotEndEventArgs> TickSnapshotEnd;
        event EventHandler<TickStringEventArgs> TickString;
        event EventHandler<TimeEventArgs> Time;
        event EventHandler<UpdateAccountTimeEventArgs> UpdateAccountTime;
        event EventHandler<UpdatePortfolioEventArgs> UpdatePortfolio;
        event EventHandler ConnectAck;
        event EventHandler<UpdateNewsBulletin> UpdateNewsBulletin;
        event EventHandler<VerifyMessageApiEventArgs> VerifyMessageApi;
        event EventHandler<VerifyCompletedEventArgs> VerifyCompleted;
        event EventHandler<VerifyAndAuthMessageApiEventArgs> VerifyAndAuthMessageApi;
        event EventHandler<VerifyAndAuthCompletedEventArgs> VerifyAndAuthCompleted;
        event EventHandler<DisplayGroupListEventArgs> DisplayGroupList;
        event EventHandler<DisplayGroupUpdatedEventArgs> DisplayGroupUpdated;
        event EventHandler<SmartComponentsEventArgs> SmartComponents;
        event EventHandler<RerouteRequest> RerouteMktDataRequest;
        event EventHandler<RerouteRequest> RerouteMktDepthRequest;
    }
}